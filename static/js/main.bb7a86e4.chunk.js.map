{"version":3,"sources":["serviceWorker.js","components/popup.js","components/graph.js","components/stockportfolio.js","index.js"],"names":["Boolean","window","location","hostname","match","PopUp","this","props","show","className","style","backdropStyle","position","top","bottom","left","right","backgroundColor","padding","modalStyle","borderRadius","maxWidth","minHeight","margin","children","onClick","onClose","React","Component","Graph","closeModal","setState","open","onCloseModal","state","stocks","chartData","stockData","drawStockValueCurves","bind","name","fetch","then","response","json","data","Object","keys","dataL","days","reverse","values","map","day","concat","alert","list","selectIdList","j","length","select","document","getElementById","i","option","createElement","text","add","nameList","l","sD","Promise","all","a","fetchStockData","result","assign","time1","time2","addListToSelectTag","drawGraph","idx1","indexOf","idx2","namelist","isUndefined","realList","push","dataPoints","parseFloat","Array","isArray","center","classNames","overlay","styles","customOverlay","modal","customModal","id","e","value","chartType","width","height","loader","options","title","curveType","legend","Stock","stock","unitValue","currencySymbol","quantity","totalValue","onChange","setChecked","defaultChecked","checked","type","Portfolio","popUpModal","isOpen","countTotal","total","toFixed","totalValuOfStocks","saveStock","newStock","newstock","toUpperCase","trim","totalv","len","newStocksList","updatePortfolioState","onOpenModal","stopPropagation","currency","newName","changeName","saveNameChange","cancelNameChange","removeSelected","arr1","arr2","copyStocks","newTotalValue","el","target","input","parentElement","firstChild","hasAttribute","removeAttribute","setAttribute","div","nextSibling","n","split","cpy","selected","filter","clist","getElementsByTagName","stocksCpy","s","renObjData","index","key","openModal","src","closePortfolio","hidden","hideTextShowInput","App","onSetResult","localStorage","setItem","JSON","stringify","portfolio","pf","getItem","parse","addNewPortfolio","portfolioId","pfCopy","pC","p","Math","max","setId","newPortfolio","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bb7a86e4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\n\r\nclass PopUp extends React.Component {\r\n    render() {\r\n        // Render nothing if the \"show\" prop is false\r\n        if(!this.props.show) {\r\n            return null;\r\n        }\r\n\r\n        // The grey background\r\n        const backdropStyle = {\r\n            position: 'fixed',\r\n            top: 0,\r\n            bottom: 0,\r\n            left: 5,\r\n            right: 0,\r\n            backgroundColor: 'rgba(0,0,0,0.3)',\r\n            padding: 50\r\n        };\r\n\r\n        // The modal \"window\"\r\n        const modalStyle = {\r\n            backgroundColor: '#fff',\r\n            borderRadius: 5,\r\n            maxWidth: 500,\r\n            minHeight: 300,\r\n            margin: '0 auto',\r\n            padding: 30\r\n        };\r\n\r\n        return (\r\n            <div className=\"backdrop\" style={{backdropStyle}}>\r\n                <div className=\"modal\" style={{modalStyle}}>\r\n                    {this.props.children}\r\n\r\n                    <div className=\"footer\">\r\n                        <button onClick={this.props.onClose}>\r\n                            Close\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PopUp;","import React from 'react'\r\nimport Chart from \"react-google-charts\";\r\nimport Modal from 'react-responsive-modal';\r\nimport styles from '../graph-style.css';\r\n\r\nexport default class Graph extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            stocks: this.props.stocks,\r\n            chartData: [],\r\n            stockData: [],\r\n            open: this.props.open,\r\n        };\r\n        this.drawStockValueCurves = this.drawStockValueCurves.bind(this)\r\n        this.drawStockValueCurves()\r\n    }\r\n\r\n    //Closes modal\r\n    closeModal = () => {\r\n        this.setState({ open: false });\r\n        this.props.onCloseModal()\r\n    };\r\n    //Fetches stock data for past 10 recorded dates from alphavantage, documentation can be found in alphavantage.io/documentation\r\n    async fetchStockData(name){\r\n        return await fetch('https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=' + name + '&apikey=XDNRE3YNSC6MJXBQ')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if(Object.keys(data)[0] === 'Note' || Object.keys(data)[0] === 'Error Message'){\r\n                    alert('Only 5 request are allowed in one minute (by API)')\r\n                }else {\r\n                    let dataL = data['Time Series (Daily)']\r\n                    let days = Object.keys(dataL).reverse()\r\n                    let values = []\r\n                    values = days.map(day => values.concat(dataL[day])[0])\r\n                    return [values, days]\r\n                }\r\n            })\r\n    }\r\n    addListToSelectTag(list, selectIdList) {\r\n        for(var j = 0; j<selectIdList.length; j++){\r\n            let select = document.getElementById(selectIdList[j])\r\n            for(var i = 0; i<list.length; i++){\r\n                var option = document.createElement(\"option\")\r\n                option.text = list[i]\r\n                select.add(option)\r\n            }\r\n        }\r\n    }\r\n    //Draws curve\r\n    async drawStockValueCurves() {\r\n        let stocks = this.state.stocks\r\n        let nameList = stocks.map(l => l.name)\r\n        let sD = []\r\n        await Promise.all(nameList.map(async (name) =>\r\n            this.fetchStockData(name))).then(result => {\r\n            sD = [...result];\r\n            this.setState({stockData: Object.assign([], result)});\r\n        })\r\n        if(sD.length !== 0){\r\n            let time1 = sD[0][1][sD[0][1].length-11]\r\n            let time2 = sD[0][1][sD[0][1].length-1]\r\n            this.addListToSelectTag(sD[0][1], ['time1', 'time2'])\r\n            this.drawGraph(time1, time2)\r\n        }\r\n    }\r\n\r\n    drawGraph(time1, time2){\r\n        let sD = Object.assign([], this.state.stockData)\r\n        let idx1 = sD[0][1].indexOf(time1)\r\n        let idx2 = sD[0][1].indexOf(time2)\r\n        if(!(idx1 <= idx2)){\r\n            alert('Time invalid')\r\n        } else {\r\n            let stocks = [...this.state.stocks]\r\n            let list = ['Time']\r\n            let namelist = stocks.map(l => l.name)\r\n            list =list.concat(namelist)\r\n            let isUndefined = false\r\n            let realList = []\r\n            realList.push(list)\r\n            try{\r\n                for(var i = idx1; i<idx2+1; i++){\r\n                    let dataPoints = []\r\n                    dataPoints = [sD[0][1][i]]\r\n                    for(var j = 0; j<sD.length; j++){\r\n                        dataPoints = dataPoints.concat(parseFloat(Object.values(sD[j][0][i])[0]))\r\n                    }\r\n                    if(!Array.isArray(dataPoints)){\r\n                        isUndefined = true\r\n                        break;\r\n                    }\r\n                    realList.push(dataPoints)\r\n                }\r\n            }catch{\r\n            }\r\n            if(isUndefined === false){\r\n                this.setState({\r\n                    chartData: realList,\r\n                });\r\n            } else {\r\n                alert('Only 5 request are allowed in one minute (by API)')\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const options = {\r\n            title: \"Stock value\",\r\n            curveType: \"function\",\r\n            legend: { position: \"bottom\" }\r\n        };\r\n        return(\r\n            <Modal\r\n                open={this.state.open}\r\n                onClose={this.closeModal}\r\n                center\r\n                classNames={{\r\n                    overlay: styles.customOverlay,\r\n                    modal: styles.customModal,\r\n                }}\r\n            >\r\n\r\n                <div>\r\n                    <h2>Graph</h2>\r\n                    Select by date\r\n                    <select id='time1'><option>Select starting date</option></select>\r\n                    <select id='time2'><option>Select ending date</option></select>\r\n                    <button onClick={(e) => {this.drawGraph(document.getElementById('time1').value, document.getElementById('time2').value)}}>Search</button>\r\n                    <Chart\r\n                        chartType=\"LineChart\"\r\n                        width=\"700px\"\r\n                        height=\"400px\"\r\n                        loader={<div>Loading chart...</div>}\r\n                        data={this.state.chartData}\r\n                        options={options}\r\n                    />\r\n                </div>\r\n\r\n            </Modal>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport '../App.css'\r\nimport PopUp from './popup.js'\r\nimport Graph from './graph.js'\r\n\r\nclass Stock extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <tr>\r\n                <td><p>{this.props.stock.name}</p></td>\r\n                <td><p>{this.props.stock.unitValue}{this.props.currencySymbol}</p></td>\r\n                <td><p>{this.props.stock.quantity}</p></td>\r\n                <td><p>{this.props.stock.totalValue}{this.props.currencySymbol}</p></td>\r\n                <td><input onChange={(e) => {this.props.setChecked(e, this.props.stock.id)}} id ={'check-' +this.props.stock.id} defaultChecked = {this.props.stock.checked} type=\"checkbox\" ></input></td>\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n\r\nexport default class Portfolio extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            stocks: this.props.stocks,\r\n            totalValuOfStocks:this.props.total,\r\n            currency: 'EUR',\r\n            newName: '',\r\n            name: this.props.name,\r\n            id: this.props.id,\r\n            isOpen: false,\r\n            open:false,\r\n            newStock: {name : '', unitValue : 0, quantity : 0, totalValue:0},\r\n            chartData: [],\r\n            stockData: [],\r\n            currencySymbol: '€',\r\n        };\r\n        this.changeName =this.changeName.bind(this)\r\n        this.saveNameChange =this.saveNameChange.bind(this)\r\n        this.cancelNameChange =this.cancelNameChange.bind(this)\r\n        this.saveStock = this.saveStock.bind(this)\r\n        this.newStock = this.newStock.bind(this)\r\n        this.removeSelected = this.removeSelected.bind(this)\r\n        this.setChecked = this.setChecked.bind(this)\r\n        this.onOpenModal = this.onOpenModal.bind(this)\r\n\r\n    }\r\n    //Checks if arrays are equal\r\n    arraysEqual(arr1, arr2) {\r\n        if(arr1.length !== arr2.length)\r\n            return false;\r\n        for(var i = arr1.length; i--;) {\r\n            if(arr1[i] !== arr2[i])\r\n                return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n//On component mount updates totals of stocks\r\n    componentDidMount() {\r\n        let copyStocks = [...this.props.stocks]\r\n        let newTotalValue = 0\r\n        for(var i = 0; i<copyStocks.length; i++){\r\n            let total = copyStocks[i].unitValue*copyStocks[i].quantity\r\n            copyStocks[i].totalValue = total.toFixed(2)\r\n            copyStocks[i].checked = false\r\n            newTotalValue = total + newTotalValue\r\n        }\r\n        newTotalValue = newTotalValue.toFixed(2)\r\n        this.setState({\r\n            stocks: copyStocks,\r\n            totalValuOfStocks: newTotalValue\r\n        }, () => {\r\n            this.props.updatePortfolioState(this.state.id, this.state.stocks, this.state.name)\r\n        });\r\n    }\r\n\r\n    //Toggles input and text\r\n    hideTextShowInput(e){\r\n        e.stopPropagation();\r\n        let el = e.target\r\n        let input = el.parentElement.firstChild\r\n        if(el.hasAttribute(\"hidden\")){\r\n            el.removeAttribute(\"hidden\")\r\n        }else{\r\n            el.setAttribute(\"hidden\", true)}\r\n        input.removeAttribute(\"hidden\")\r\n    }\r\n    //Store name while typing\r\n    changeName(e){\r\n        e.stopPropagation();\r\n        this.setState({\r\n            newName:e.target.value,\r\n        })\r\n    }\r\n    //Saves modified portfolio name\r\n    saveNameChange(e){\r\n        e.stopPropagation();\r\n        if(this.state.newName.trim().length>0){\r\n            this.setState({\r\n                name: this.state.newName.trim()\r\n            }, () => {\r\n                this.props.updatePortfolioState(this.state.id, this.state.stocks, this.state.name)\r\n            });\r\n        } else {\r\n            alert('Name too short')\r\n        }\r\n        let div = e.target.parentElement\r\n        let text = div.nextSibling\r\n        div.setAttribute(\"hidden\", true)\r\n        text.removeAttribute(\"hidden\")\r\n    }\r\n\r\n    //Cancels name change\r\n    cancelNameChange(e){\r\n        let div = e.target.parentElement\r\n        let text = div.nextSibling\r\n        div.setAttribute(\"hidden\", true)\r\n        text.removeAttribute(\"hidden\")\r\n    }\r\n\r\n    //Toggles popup\r\n    popUpModal = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n\r\n    //Restores new stock to state on change\r\n    newStock(e) {\r\n        e.stopPropagation();\r\n        const n = e.target.id.split('-')[0]\r\n        let cpy = {...this.state.newStock}\r\n        cpy[n] = e.target.value\r\n        this.setState({\r\n            newStock: cpy,\r\n        }, () => {\r\n            this.props.updatePortfolioState(this.state.id, this.state.stocks, this.state.name)\r\n        });\r\n    }\r\n    //Count total value of stocks\r\n    countTotal=()=>{\r\n        let stocks = [...this.state.stocks]\r\n        let total = 0\r\n        for(var i = 0; i<stocks.length; i++){\r\n            total = parseFloat(stocks[i].totalValue) + total\r\n        }\r\n        total = total.toFixed(2)\r\n        this.setState({\r\n            totalValuOfStocks: total\r\n        })\r\n    }\r\n    //Saves and add stock when clicking 'save'\r\n    saveStock = () => {\r\n        if(this.state.newStock.name.length>0 && this.state.newStock.quantity > 0){\r\n            let newstock =  {...this.state.newStock}\r\n            let name = newstock.name.toUpperCase().trim()\r\n            if(name.trim().length<1){\r\n                alert('Name is too short')\r\n            } else if(newstock.quantity % 1 !== 0){\r\n                alert(\"Quantity has to be a whole number\")\r\n            }else {\r\n                if(this.state.stocks.length>=50){\r\n                    alert('Maximum number of stocks in a portfolio is 50')\r\n                } else {\r\n                    fetch('https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol='+name+'&apikey=XDNRE3YNSC6MJXBQ')\r\n                        .then(response => response.json())\r\n                        .then(data => {\r\n                            if(Object.keys(data)[0] === 'Note' || Object.keys(data)[0] === 'Error Message'){\r\n                                alert(Object.values(data)[0])\r\n                            }else {\r\n                                let dataL = data['Time Series (Daily)']\r\n                                let day = Object.keys(dataL)[0]\r\n                                let value = parseFloat(Object.values(dataL[day])[0])\r\n                                newstock.name = name\r\n                                newstock.unitValue = value.toFixed(2)\r\n                                let totalv = newstock.unitValue*newstock.quantity\r\n                                newstock.totalValue = totalv.toFixed(2)\r\n                                newstock.checked = false\r\n                                let len = this.state.stocks.length + 1\r\n                                newstock.id = 'stock' + this.state.id + len\r\n                                var newStocksList = this.state.stocks.concat(newstock)\r\n                                this.setState({\r\n                                    stocks: newStocksList,\r\n                                    isOpen: !this.state.isOpen,\r\n                                }, () => {\r\n                                    this.props.updatePortfolioState(this.state.id, this.state.stocks, this.state.name);\r\n                                    this.countTotal()\r\n                                });\r\n                            }\r\n                        })\r\n                }\r\n            }\r\n        } else {\r\n            alert('Invalid input')\r\n        }\r\n    }\r\n    //Removes selected columns and stocks\r\n    removeSelected (e) {\r\n        let stocksCopy = [...this.state.stocks]\r\n        let selected = stocksCopy.filter(stock => stock.checked === false)\r\n\r\n        this.setState({\r\n            stocks: selected}, () => {\r\n            this.props.updatePortfolioState(this.state.id, this.state.stocks, this.state.name)\r\n            this.countTotal()\r\n            var clist = document.getElementsByTagName(\"input\");\r\n            for (var i = 0; i < clist.length; ++i) { clist[i].checked = false; }\r\n\r\n        });\r\n    }\r\n    //Sets checked to true in state stock when clicking the checkbox\r\n    setChecked (e, id) {\r\n        e.stopPropagation()\r\n        let stocksCpy = Object.assign([], this.state.stocks);\r\n        let stock = stocksCpy.filter(s=> s.id === id)[0]\r\n        stock.checked ? stock.checked = false : stock.checked = true\r\n        this.setState({\r\n            stocks: stocksCpy,\r\n        }, () => {\r\n            this.props.updatePortfolioState(this.state.id, this.state.stocks, this.state.name);\r\n        });\r\n\r\n    }\r\n\r\n    //Opens modal and draws graph\r\n    onOpenModal = (e) => {\r\n        e.stopPropagation();\r\n        this.setState({ open: true });\r\n    };\r\n    //Closes modal\r\n    onCloseModal = () => {\r\n        this.setState({ open: false });\r\n    };\r\n\r\n    render() {\r\n        const renObjData = this.state.stocks.map((data, index) =>\r\n            <Stock stock ={data} key={index} setChecked={this.setChecked} currencySymbol={this.state.currencySymbol}/>\r\n        );\r\n        const openModal = (this.state.open === true) ?\r\n            <Graph stocks={this.state.stocks} onCloseModal={this.onCloseModal} open={this.state.open}></Graph> : ''\r\n\r\n\r\n        return (\r\n            <div className=\"card\">\r\n                <script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>\r\n                <button onClick={(e) => {this.props.closePortfolio(e, this.state.id)}} className = 'close' ></button>\r\n                <div><div hidden><input onChange={this.changeName} id={this.props.name}></input><button onClick={this.saveNameChange}>Save</button><button onClick={this.cancelNameChange}>Cancel</button></div><p onClick={this.hideTextShowInput}>{this.state.name}</p></div>\r\n\r\n                <div className=\"table-wrapper\">\r\n                    <table className=\"dataSheet\">\r\n                        <tbody>\r\n                        <tr><th>Name</th><th>Unit value</th><th>Quantity</th><th>Total value</th><th>Select</th></tr>\r\n                        {renObjData}\r\n                        </tbody>\r\n\r\n                    </table>\r\n                </div>\r\n                <div className=\"btn-group\">\r\n\r\n                    <button onClick={this.popUpModal} className=\"button\" id=\"desktop\" >\r\n                        Add stock\r\n                    </button>\r\n\r\n                    <button onClick={this.onOpenModal} className=\"button\" id=\"mobile\" >\r\n                        Show performance graph\r\n                    </button>\r\n                    <button onClick={this.removeSelected} className=\"button\" id=\"mobile\" >\r\n                        Remove selected\r\n                    </button>\r\n                </div>\r\n                <div>Total stock value: {this.state.totalValuOfStocks}{this.state.currencySymbol}</div>\r\n                <PopUp show={this.state.isOpen}\r\n                       onClose={this.popUpModal}>\r\n                    <form onChange={this.newStock}>\r\n                        Name: <input id={'name-'+this.state.id} type=\"text\"></input>\r\n                        Quantity:<input id={'quantity-'+this.state.id} type=\"number\"></input>\r\n                        <button onClick={this.saveStock}type=\"button\">Save</button>\r\n                    </form>\r\n                </PopUp>\r\n                {openModal}\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './App.css';\nimport Portfolio from './components/stockportfolio.js'\n\nclass App extends React.Component {\n    constructor() {\n        //pf for portfolio\n        super();\n        let pf = localStorage.getItem('portfolio')\n        if(pf !== null){\n            pf = JSON.parse(pf)\n        } else {\n            pf = []\n        }\n        this.state = {\n            portfolio: pf,\n        }\n        this.addNewPortfolio = this.addNewPortfolio.bind(this);\n        this.closePortfolio = this.closePortfolio.bind(this)\n        this.updatePortfolioState = this.updatePortfolioState.bind(this)\n    }\n\n    //Set result to state and localStorage\n    onSetResult = (result, key) => {\n        localStorage.setItem(key, JSON.stringify(result));\n        this.setState({ portfolio: result });\n    }\n    //Update portfolio when stock updates\n    updatePortfolioState(portfolioId, stocks, name){\n        let pfCopy =  Object.assign([],  this.state.portfolio);\n        for(var i = 0; i<pfCopy.length; i++){\n            if(pfCopy[i].id === portfolioId){\n                pfCopy[i].name = name\n                pfCopy[i].stocks = stocks\n            }\n        }\n        this.setState({portfolio: pfCopy})\n        this.onSetResult(pfCopy, 'portfolio')\n    }\n    //Counts max id\n    setId(){\n        let pC = [...this.state.portfolio]\n        let list =[];\n        list = list.concat(0)\n        let idList = pC.map(p => p.id)\n        idList.map(id => list = list.concat(id))\n        let max = (Math.max(...list)) + 1\n        return max\n    }\n    //Adds new empty portfolio\n    addNewPortfolio (e) {\n        e.stopPropagation();\n        let len = this.state.portfolio.length +1\n        let id = this.setId()\n        if(len<=5){\n            let newPortfolio = { name: 'Portfolio ' + len, id: id, stocks: []}\n            this.setState({\n                portfolio: this.state.portfolio.concat([newPortfolio])\n            });\n            this.onSetResult(this.state.portfolio.concat([newPortfolio]), 'portfolio')\n        } else {\n            alert('Too many portfolios. Max amount of portfolios is 5.')\n        }\n    }\n    //Closes and deletes portfolio\n    closePortfolio(e, id){\n        e.stopPropagation();\n        let portfolios = [...this.state.portfolio]\n        let selected = portfolios.filter(portfolio => portfolio.id !==  id)\n        this.setState({portfolio: selected});\n        this.onSetResult(selected, 'portfolio')\n    }\n\n    render(){\n        //Adds portfolios from state to the page\n        const renObjData = this.state.portfolio.map( (data,index) =>\n            <Portfolio name={data.name} total={data.totalValue} updatePortfolioState={this.updatePortfolioState} stocks={data.stocks} closePortfolio={this.closePortfolio} key = {data.id} id={data.id} />\n        );\n        return (\n            <div className=\"App\">\n                <header >\n\n                </header>\n                <body>\n                <div className=\"addPortfolio\"> <button onClick={this.addNewPortfolio}>Add new portfolio</button></div>\n                <div className=\"row\">\n                    {renObjData}\n\n                </div>\n                </body>\n\n            </div>\n\n        )\n    }\n}\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}